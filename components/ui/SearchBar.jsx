"use client"

// libs
import { useState, useEffect } from "react"

// Most of the auto completion code is generated by AI
// I am searching for bug
// TODO: reduce the complexity of auto completion process

/**
 * A search bar component with autocomplete functionality.
 *
 * @param {object} props - Props object
 * @param {string} [props.placeholder="Search..."] - Placeholder text
 * @param {function} props.onSearch - Function to run when search is submitted
 * @param {string} [props.className=""] - Additional classes
 *
 * @returns {JSX.Element} Search bar component
 */
const SearchBar = ({ placeholder, onSearch, className = "" }) => {
  const [searchTerm, setSearchTerm] = useState("")
  const [suggestions, setSuggestions] = useState([])
  const [showSuggestions, setShowSuggestions] = useState(false)

  const dummySearchAPI = (term) => {
    const allSuggestions = [
      "property 1",
      "property 2",
      "property 3",
      "property 4",
      "property 5",
    ]

    return allSuggestions.filter((item) =>
      item.toLowerCase().includes(term.toLowerCase())
    )
  }

  // Handle input change and fetch suggestions
  useEffect(() => {
    if (searchTerm.length > 1) {
      const timeoutId = setTimeout(() => {
        const results = dummySearchAPI(searchTerm)
        setSuggestions(results)
        setShowSuggestions(results.length > 0)
      }, 300)

      return () => clearTimeout(timeoutId)
    } else {
      setSuggestions([])
      setShowSuggestions(false)
    }
  }, [searchTerm])

  // Handle suggestion selection
  const handleSuggestionClick = (suggestion) => {
    setSearchTerm(suggestion)
    setShowSuggestions(false)
    onSearch(suggestion) // Pass the selected suggestion to the parent
  }

  return (
    <div
      className={`
        search-wrapper
        relative
        flex-grow
        ${className}
      `}
    >
      <input
        type="text"
        placeholder={placeholder || "Search..."}
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        onFocus={() => setShowSuggestions(suggestions.length > 0)}
        onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
        className={`
          outline-none
          focus:outline-none
          text-white
          w-full
          p-3
          rounded
          bg-transparent
          border-2
          border-white/20
          focus:border-white/80
          duration-200
        `}
      />
      {/* Search Icon */}
      <div
        className={`
          absolute
          right-3
          top-1/2
          transform
          -translate-y-1/2
          text-gray-500
          pointer-events-none
        `}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          />
        </svg>
      </div>

      {/* Suggestions Dropdown */}
      {showSuggestions && (
        <div
          className={`
            absolute
            top-full
            left-0
            right-0
            mt-1
            z-10
            bg-white
            border
            border-gray-200
            rounded-sm
            shadow-lg
            max-h-60
            overflow-y-auto
          `}
        >
          {suggestions.map((suggestion, index) => (
            <div
              key={index}
              className={`
                px-4
                py-2
                text-left
                text-gray-800
                hover:bg-gray-100
                cursor-pointer
              `}
              onMouseDown={() => handleSuggestionClick(suggestion)}
            >
              {suggestion}
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

export default SearchBar
